  Maven:




Maven is a tool that is used to compile, validate codes and analyse the test cases in the code.
*manage the building reporting and documentation from source control managment (scm)
* maven projects are configured through project object model(pom)
*pom.xml file contains documentation for all the objects,properties, methods and events,


WHAT MAVEN IS CAPABLE OF?

*Information of project is centralized through maven.
*Our software project is modeled by it 
*Build procrss is managed 
*Data about the software and our project 
*Deployable artifacts can be generated from source code
*your source code is complied, packed, test and distributed
*Reports is created, website is generated for the project

MAVEN BUILD LIFECYLE:
===================

* In maven, the build run is using a predefined and orderd set of steps to call the build life cylcle.
*The build tasks that will be performed during each phase are determined by the confuguration in the project file, and in particular the selected packaging 
*Maven relies on build lifecycles to define the process of building and distributed artifacts
EX:(jarfilels, warfilels)
THERE ARE THREE  BUILT IN BUILD LIFECYCLES:
--DEFAULT - handles project building and deployment
--CLEAN   - handles project cleaning
--SITE    - handles project site generation

MAVEN ARCHITECTURE:
==================

plugin     plugin2  plugin3 plugin4

 ----------------------------------- 
           core
------------------------------------

 remote                  local 
repository            repository

* local repository refering to windows local mechine.
* remore repository refering to organization.


MAVEN ARTIFACTS:
===============
*An artifact is a file resulting from packing a project
*can be a jar, war, ear, .xmlfile, for example
*Artifacts are deployed in repostories so they can be used as dependencies by other projects.
*Artifacts are identified by three components
*Groupid-- An unique identifer for a group of relatede artifacts usually  named like java packages(ex: pt.jpereia.mobile)
*Artifacts--An unique identifier, within the context of groupid that identifies the artifacts(project)
ex:puzzule
*Version--Also called artifact coordinates


MAVEN REPOSITORY FLOW:
=====================

------------
Remote
repository
------------
                  step2

                               ----------
  step3                             DEVELOPER
                              -----------    
                 step1
                 step4       
------------
Local 
Repository
-------------  

STEP1 : When developer executes mvn command it will go and checkin local repository.If found the dependencies are plugin the local repo developer will see the output.
STEP2 : If not founding local repository from developer mechines and it will go and search in remote repository
STEP3 : from remote repository required dependencies or pulgin will get store in local repository
STEP4 : From local repository developer will get the output.

INTERVIEW QUESTUIN:
For the first time when we execute mvn command it will take more time, but when we execute for the second time it will take less time because the repository dependencies is already stored in local repostion.

PROJECT OBJECT MODELS:
=====================
*Pom for short
*xml.file located at the root of the project (pom.xml)
*It includes configuration for uour project including :
-Information about the project
-configuration details to about the project 
-contains default values for most of the projects
Ex: source, dir, target div
-dependencies of the project
-configuration about plugins and goals
-used repositories
** DECLARING DEPENDENCIES:
   =======================            
* While declaring the dependencies coordinats of the artifacts must be provided
* GroupID: a unique identifier for the group of related artifact
*ARTIFACTID : An artifact is a file which is made after packaging a project and Artifactid is a unique identifier within the context of groupid and it is identifies the artifacts
VERSION: It is an identifier for the release or build number of project.
                       Apache Maven

what is maven?

Maven is a tool that is used to compile, validate codes and analyse the test-cases in the code.

* Manages the building, reporting and documentation from source control management(SCM).
* Maven projects are configure through projects object model(POM).
* pom.xml file contains documentation for all the objects, properties, methods and events.

What maven is capable of?

* Information of project is centralized through maven
* Build process is managed
* Data about the software is gathered and then build itself
* Document the software and our project
* Deployable artifacts can be gererated from source code
* Your source code is compiled, packed, test and distributed
* Reports is created, website is generated for the project

Maven Build Life Cycle:-

* In maven, the build run is using a predefined and ordered set of steps to call the build lifr cycle
* The build tasks that will be performed during each phase are determined by the configuration in the project file, and it perticular the selected   packaging
* Maven relies on build life cycles to define the process of building and distributing artifacts(eg:-jar files, war files)
* There are three build-in-build life cycles
	-Default - handles project building and deployment
	-Clean - handles project clearing
	-Site - handles projects site generation

Maven Artifacts:-

* An artifact is a file resulting from packaging a project
* Can be a jar, war, ear,.xml file, for example
* Artifacts are deployed in repositories so they can be used, as dependies, by other components:-
	Group Id-An unique identifier for a group of related artifacts. usually naed like java packages(eg:-pt.jpereira.mobile)
	Artifact id - An unique identifier, within the context of Gruopid, that identifies the artifacts(project) (eg:- puzzle)
	Version- Also called artifact coordinates

Maven Repository Flow:-

Step 1:- when developer executes mvn command it will go and check in local repository.
	If found the dependecies and plug in the local repo. Developer will go and search in remote repository
Step 2:- If not founding local repository from developer machines it will go and search in remote repository
Step 3:- From remote repository required dependencies or plug ins will get stored in local reposiory
Step 4:- From the local repository developer will get the output

Project Object Module:-

* POM for short.
* XML file located at the root of the project(pom.xml)
* It iincludes can configuration for uour project, including:-
	Information about the project
	Configuration details to build the project
	Contains default values for mos of the projects. Eg:-Source dir, target dir
	Dependies of the project
	Configuration about plugin and goals
	Used repositories 

Declaring Dependencies:-

	while declaring the dependies, coordinates of the artifacts must be provided
	
	GroupID    : A unique identifier for the group of related artifact.
	ArtifactID : A Artifact is a file which made after packaging of a project and ArtifactID is a unique identifier within the context of Group                      ID and it identifies the artifacts
	Version    : It is identifier for the release or build number of project

How to install Apache Maven on windows

Prerequirites:-
* A system running windows
* A working internet connection
* Access to account with administration priviliges 
* Access to the command prompt
* A copy of java insalled and ready to use, with the JAVA_Home environment variable set up.

Maven Through Terminal:-

* Install the Maven tar file after verifying the signature.
* After installing the Maven, check its version from ubuntu terminal by using the below command
	mvn -version
* Below command will create a project using maven.

mvn archetype:generate -DgroupId=com.example -DartifactId=helloworld -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

Maven lifecycle phases:-

* Validate :- Check if the project is correct, having all the necessary information.

	syntax :- mvn validate

* Compile:- compile the source code of the project.

	syntax :- mvn compile

* test :- test the compiled source code using suitable unit testing framework. These test should not require the code be packaged or deployed.

	syntax:- mvn test

* package:-take the compile code and package it in its distributed format, such as JAR.

	syntax:- mvn package

* integration test:- Process and deploy the package into an environment where integration tests can be run.

* verify:- Run any checksto verify the packageis validand meets quality criteria.

	syntax:- mvn verify

* install:- install the package into the local repository for use as a dependency in other projects locally.

	syntax:- mvn install

* deploy:- done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and            projects.

	syntax:- mvn deploy
* .M2 is a local repository of the Apache Maven where we run dependies and plugin where shared

* Apache Maven has an advantage that is when we run any of the lifecycle phases which will also includes previous lifecycle phases as well.
   ex:- If we run "mvn package" (which is fourth phase) which is also run previous phases as well(validate, compile, test)

